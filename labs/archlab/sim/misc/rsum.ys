# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp  # Set up stack pointer
        call main           # Execute main program
        halt                # Terminate Program

# Sample linked list
        .align 8
ele1:
        .quad 0x00a
        .quad ele2
ele2:
        .quad 0x0b0
        .quad ele3
ele3:
        .quad 0xc00
        .quad 0

main:
    irmovq ele1, %rdi
    call rsum_list           # sum_list(ls)
    ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
    pushq %rbx              # Save %rbx
    xorq %rax, %rax         # val = 0
    andq %rdi, %rdi         # Set CC
    je end                  # if =, goto end
    mrmovq (%rdi), %rbx     # val = ls->val
    mrmovq 8(%rdi), %rdi    # Get ls->next
    call rsum_list          # call rsum_list(ls->next)
    addq %rbx, %rax         # val += rest
end:
    popq %rbx               # Restore %rbx
    ret                     # return val


# Stack starts here and grows to lower addresses
        .pos 0x200
stack:
